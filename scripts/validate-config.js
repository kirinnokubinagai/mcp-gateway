#!/usr/bin/env node

/**
 * MCP GatewayË®≠ÂÆö„Éï„Ç°„Ç§„É´Ê§úË®º„ÉÑ„Éº„É´
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join, resolve } from 'path';
import { configValidator } from '../server/config-validator.js';
import chalk from 'chalk';

const PROFILE_NAMES = ['claude-desktop', 'claude-code', 'gemini-cli'];

/**
 * Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
 */
function loadConfig(filePath) {
  try {
    const content = readFileSync(filePath, 'utf-8');
    return JSON.parse(content);
  } catch (error) {
    if (error.code === 'ENOENT') {
      console.error(chalk.red(`‚ùå „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${filePath}`));
    } else if (error instanceof SyntaxError) {
      console.error(chalk.red(`‚ùå JSON„Éë„Éº„Çπ„Ç®„É©„Éº: ${error.message}`));
    } else {
      console.error(chalk.red(`‚ùå „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${error.message}`));
    }
    return null;
  }
}

/**
 * Ê§úË®ºÁµêÊûú„ÇíË°®Á§∫
 */
function displayResults(filePath, result) {
  console.log(chalk.bold(`\nüìã ${filePath}`));

  if (result.valid) {
    console.log(chalk.green('‚úÖ Ê§úË®ºÊàêÂäü'));
  } else {
    console.log(chalk.red('‚ùå Ê§úË®ºÂ§±Êïó'));
  }

  // „Ç®„É©„Éº„ÅÆË°®Á§∫
  if (result.errors && result.errors.length > 0) {
    console.log(chalk.red('\n„Ç®„É©„Éº:'));
    result.errors.forEach((error, index) => {
      console.log(chalk.red(`  ${index + 1}. ${error.path || '„É´„Éº„Éà'}: ${error.message}`));
      if (error.value !== undefined) {
        console.log(chalk.gray(`     ÂÄ§: ${JSON.stringify(error.value)}`));
      }
      if (error.suggestion) {
        console.log(chalk.yellow(`     ÊèêÊ°à: ${error.suggestion}`));
      }
    });
  }

  // Ë≠¶Âëä„ÅÆË°®Á§∫
  if (result.warnings && result.warnings.length > 0) {
    console.log(chalk.yellow('\nË≠¶Âëä:'));
    result.warnings.forEach((warning, index) => {
      console.log(chalk.yellow(`  ${index + 1}. ${warning.path}: ${warning.message}`));
      if (warning.suggestion) {
        console.log(chalk.gray(`     ÊèêÊ°à: ${warning.suggestion}`));
      }
    });
  }

  console.log('');
}

/**
 * Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ‰øÆÂæ©
 */
async function repairConfig(filePath, isProfileConfig = false) {
  const config = loadConfig(filePath);
  if (!config) return false;

  console.log(chalk.blue(`\nüîß ${filePath} „Çí‰øÆÂæ©„Åó„Å¶„ÅÑ„Åæ„Åô...`));

  try {
    const repairResult = await configValidator.repairConfig(config, isProfileConfig);

    if (repairResult.repaired) {
      console.log(chalk.green('‚úÖ ‰øÆÂæ©„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü'));
      console.log(chalk.gray('Â§âÊõ¥ÂÜÖÂÆπ:'));
      repairResult.changes.forEach((change) => {
        console.log(chalk.gray(`  - ${change}`));
      });

      // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çí‰ΩúÊàê
      const backupPath = `${filePath}.backup`;
      writeFileSync(backupPath, JSON.stringify(config, null, 2));
      console.log(chalk.gray(`„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: ${backupPath}`));

      // ‰øÆÂæ©„Åï„Çå„ÅüË®≠ÂÆö„Çí‰øùÂ≠ò
      writeFileSync(filePath, JSON.stringify(repairResult.config, null, 2));
      console.log(chalk.green(`‚úÖ „Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü: ${filePath}`));

      return true;
    } else {
      console.log(chalk.gray('‰øÆÂæ©„ÅÆÂøÖË¶Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì'));
      return true;
    }
  } catch (error) {
    console.error(chalk.red(`‚ùå ‰øÆÂæ©„Ç®„É©„Éº: ${error.message}`));
    return false;
  }
}

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  console.log(chalk.bold.blue('MCP Gateway Ë®≠ÂÆöÊ§úË®º„ÉÑ„Éº„É´\n'));

  if (command === '--help' || command === '-h') {
    console.log('‰ΩøÁî®ÊñπÊ≥ï:');
    console.log('  node validate-config.js [„Ç™„Éó„Ç∑„Éß„É≥] [„Éï„Ç°„Ç§„É´]');
    console.log('\n„Ç™„Éó„Ç∑„Éß„É≥:');
    console.log('  --repair, -r     Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíËá™Âãï‰øÆÂæ©');
    console.log('  --all, -a        „Åô„Åπ„Å¶„ÅÆ„Éó„É≠„Éï„Ç°„Ç§„É´Ë®≠ÂÆö„ÇíÊ§úË®º');
    console.log('  --help, -h       „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫');
    console.log('\n‰æã:');
    console.log('  node validate-config.js mcp-config.json');
    console.log('  node validate-config.js --repair mcp-config-claude-desktop.json');
    console.log('  node validate-config.js --all');
    return;
  }

  const isRepair = command === '--repair' || command === '-r';
  const isAll = command === '--all' || command === '-a';

  if (isAll) {
    // „Åô„Åπ„Å¶„ÅÆ„Éó„É≠„Éï„Ç°„Ç§„É´Ë®≠ÂÆö„ÇíÊ§úË®º
    console.log(chalk.bold('„Åô„Åπ„Å¶„ÅÆ„Éó„É≠„Éï„Ç°„Ç§„É´Ë®≠ÂÆö„ÇíÊ§úË®º„Åó„Åæ„Åô...\n'));

    // „É°„Ç§„É≥Ë®≠ÂÆö„Éï„Ç°„Ç§„É´
    const mainConfigPath = resolve('mcp-config.json');
    if (existsSync(mainConfigPath)) {
      const config = loadConfig(mainConfigPath);
      if (config) {
        const result = await configValidator.validateConfig(config, false);
        displayResults('mcp-config.json', result);

        if (isRepair && !result.valid) {
          await repairConfig(mainConfigPath, false);
        }
      }
    }

    // „Éó„É≠„Éï„Ç°„Ç§„É´Ë®≠ÂÆö„Éï„Ç°„Ç§„É´
    for (const profile of PROFILE_NAMES) {
      const profilePath = resolve(`mcp-config-${profile}.json`);
      if (existsSync(profilePath)) {
        const config = loadConfig(profilePath);
        if (config) {
          const result = await configValidator.validateConfig(config, true);
          displayResults(`mcp-config-${profile}.json`, result);

          if (isRepair && !result.valid) {
            await repairConfig(profilePath, true);
          }
        }
      }
    }
  } else {
    // ÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÊ§úË®º
    const filePath = isRepair ? args[1] : args[0];

    if (!filePath) {
      console.error(chalk.red('‚ùå „Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ'));
      console.log(chalk.gray('„Éò„É´„Éó„ÇíË°®Á§∫: node validate-config.js --help'));
      process.exit(1);
    }

    const resolvedPath = resolve(filePath);
    const config = loadConfig(resolvedPath);

    if (config) {
      // „Éó„É≠„Éï„Ç°„Ç§„É´Ë®≠ÂÆö„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
      const isProfileConfig = PROFILE_NAMES.some((profile) =>
        filePath.includes(`mcp-config-${profile}`)
      );

      const result = await configValidator.validateConfig(config, isProfileConfig);
      displayResults(filePath, result);

      if (isRepair && !result.valid) {
        await repairConfig(resolvedPath, isProfileConfig);
      }
    }
  }
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('unhandledRejection', (error) => {
  console.error(chalk.red(`\n‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº: ${error.message}`));
  process.exit(1);
});

// ÂÆüË°å
main().catch((error) => {
  console.error(chalk.red(`\n‚ùå „Ç®„É©„Éº: ${error.message}`));
  process.exit(1);
});
