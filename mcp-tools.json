{
  "obsidian": [
    {
      "name": "fetch",
      "description": "Reads and returns the content of any web page. Returns the content in Markdown format by default, or can return raw HTML if raw=true parameter is set. Supports pagination through maxLength and startIndex parameters.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "maxLength": {
            "type": "number",
            "description": "Limit response length."
          },
          "raw": {
            "anyOf": [
              {
                "type": "boolean"
              }
            ],
            "description": "Returns raw HTML content if raw=true."
          },
          "startIndex": {
            "type": "number",
            "description": "Supports paginated retrieval of content."
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "name": "get_server_info",
      "description": "Returns basic details about the Obsidian Local REST API and authentication status. This is the only API request that does not require authentication.",
      "inputSchema": {
        "type": "object",
        "additionalProperties": {}
      }
    },
    {
      "name": "get_active_file",
      "description": "Returns the content of the currently active file in Obsidian. Can return either markdown content or a JSON representation including parsed tags and frontmatter.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "format": {
            "anyOf": [
              {
                "const": "json"
              },
              {
                "const": "markdown"
              }
            ]
          }
        }
      }
    },
    {
      "name": "update_active_file",
      "description": "Update the content of the active file open in Obsidian.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "append_to_active_file",
      "description": "Append content to the end of the currently-open note.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "patch_active_file",
      "description": "Insert or modify content in the currently-open note relative to a heading, block reference, or frontmatter field.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The actual content to insert, append, or use as replacement"
          },
          "operation": {
            "anyOf": [
              {
                "const": "append",
                "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
              },
              {
                "const": "prepend",
                "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
              },
              {
                "const": "replace",
                "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
              }
            ],
            "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
          },
          "target": {
            "type": "string",
            "description": "The identifier - either heading path (e.g. 'Heading 1::Subheading 1:1'), block reference ID, or frontmatter field name"
          },
          "targetType": {
            "anyOf": [
              {
                "const": "block",
                "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
              },
              {
                "const": "frontmatter",
                "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
              },
              {
                "const": "heading",
                "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
              }
            ],
            "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
          },
          "contentType": {
            "anyOf": [
              {
                "const": "application/json",
                "description": "Format of the content - use application/json for structured data like table rows or frontmatter values"
              },
              {
                "const": "text/markdown",
                "description": "Format of the content - use application/json for structured data like table rows or frontmatter values"
              }
            ],
            "description": "Format of the content - use application/json for structured data like table rows or frontmatter values"
          },
          "targetDelimiter": {
            "type": "string",
            "description": "The separator used in heading paths to indicate nesting (default '::')"
          },
          "trimTargetWhitespace": {
            "anyOf": [
              {
                "type": "boolean"
              }
            ],
            "description": "Whether to remove whitespace from target identifier before matching (default: false)"
          }
        },
        "required": [
          "content",
          "operation",
          "target",
          "targetType"
        ]
      }
    },
    {
      "name": "delete_active_file",
      "description": "Delete the currently-active file in Obsidian.",
      "inputSchema": {
        "type": "object",
        "additionalProperties": {}
      }
    },
    {
      "name": "show_file_in_obsidian",
      "description": "Open a document in the Obsidian UI. Creates a new document if it doesn't exist. Returns a confirmation if the file was opened successfully.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "newLeaf": {
            "anyOf": [
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "filename"
        ]
      }
    },
    {
      "name": "search_vault",
      "description": "Search for documents matching a specified query using either Dataview DQL or JsonLogic.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "queryType": {
            "anyOf": [
              {
                "const": "dataview"
              },
              {
                "const": "jsonlogic"
              }
            ]
          }
        },
        "required": [
          "query",
          "queryType"
        ]
      }
    },
    {
      "name": "search_vault_simple",
      "description": "Search for documents matching a text query.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "contextLength": {
            "type": "number"
          }
        },
        "required": [
          "query"
        ]
      }
    },
    {
      "name": "list_vault_files",
      "description": "List files in the root directory or a specified subdirectory of your vault.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "directory": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "get_vault_file",
      "description": "Get the content of a file from your vault.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "format": {
            "anyOf": [
              {
                "const": "json"
              },
              {
                "const": "markdown"
              }
            ]
          }
        },
        "required": [
          "filename"
        ]
      }
    },
    {
      "name": "create_vault_file",
      "description": "Create a new file in your vault or update an existing one.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "filename"
        ]
      }
    },
    {
      "name": "append_to_vault_file",
      "description": "Append content to a new or existing file.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "filename"
        ]
      }
    },
    {
      "name": "patch_vault_file",
      "description": "Insert or modify content in a file relative to a heading, block reference, or frontmatter field.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The actual content to insert, append, or use as replacement"
          },
          "filename": {
            "type": "string"
          },
          "operation": {
            "anyOf": [
              {
                "const": "append",
                "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
              },
              {
                "const": "prepend",
                "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
              },
              {
                "const": "replace",
                "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
              }
            ],
            "description": "Specifies how to modify the content: append (add after), prepend (add before), or replace existing content"
          },
          "target": {
            "type": "string",
            "description": "The identifier - either heading path (e.g. 'Heading 1::Subheading 1:1'), block reference ID, or frontmatter field name"
          },
          "targetType": {
            "anyOf": [
              {
                "const": "block",
                "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
              },
              {
                "const": "frontmatter",
                "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
              },
              {
                "const": "heading",
                "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
              }
            ],
            "description": "Identifies what to modify: a section under a heading, a referenced block, or a frontmatter field"
          },
          "contentType": {
            "anyOf": [
              {
                "const": "application/json",
                "description": "Format of the content - use application/json for structured data like table rows or frontmatter values"
              },
              {
                "const": "text/markdown",
                "description": "Format of the content - use application/json for structured data like table rows or frontmatter values"
              }
            ],
            "description": "Format of the content - use application/json for structured data like table rows or frontmatter values"
          },
          "targetDelimiter": {
            "type": "string",
            "description": "The separator used in heading paths to indicate nesting (default '::')"
          },
          "trimTargetWhitespace": {
            "anyOf": [
              {
                "type": "boolean"
              }
            ],
            "description": "Whether to remove whitespace from target identifier before matching (default: false)"
          }
        },
        "required": [
          "content",
          "filename",
          "operation",
          "target",
          "targetType"
        ]
      }
    },
    {
      "name": "delete_vault_file",
      "description": "Delete a file from your vault.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "filename"
        ]
      }
    },
    {
      "name": "search_vault_smart",
      "description": "Search for documents semantically matching a text string.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "A search phrase for semantic search",
            "minLength": 1
          },
          "filter": {
            "type": "object",
            "properties": {
              "excludeFolders": {
                "type": "array",
                "description": "An array of folder names to exclude. For example, [\"Private\", \"Archive\"]",
                "items": {
                  "type": "string"
                }
              },
              "folders": {
                "type": "array",
                "description": "An array of folder names to include. For example, [\"Public\", \"Work\"]",
                "items": {
                  "type": "string"
                }
              },
              "limit": {
                "type": "number",
                "description": "The maximum number of results to return",
                "exclusiveMinimum": 0
              }
            }
          }
        },
        "required": [
          "query"
        ]
      }
    },
    {
      "name": "execute_template",
      "description": "Execute a Templater template with the given arguments",
      "inputSchema": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "The full vault path to the template file"
          },
          "createFile": {
            "anyOf": [
              {
                "const": "false"
              },
              {
                "const": "true"
              }
            ]
          },
          "targetPath": {
            "type": "string",
            "description": "Path to save the file; required if createFile is true"
          }
        },
        "required": [
          "arguments",
          "name"
        ]
      }
    }
  ],
  "context7": [
    {
      "name": "resolve-library-id",
      "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "libraryName": {
            "type": "string",
            "description": "Library name to search for and retrieve a Context7-compatible library ID."
          }
        },
        "required": [
          "libraryName"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    },
    {
      "name": "get-library-docs",
      "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "context7CompatibleLibraryID": {
            "type": "string",
            "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
          },
          "topic": {
            "type": "string",
            "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
          },
          "tokens": {
            "type": "number",
            "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
          }
        },
        "required": [
          "context7CompatibleLibraryID"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  ]
}